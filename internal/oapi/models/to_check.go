// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ToCheck to check
//
// swagger:model toCheck
type ToCheck struct {

	// field
	// Required: true
	Field Field `json:"field"`

	// original
	// Required: true
	Original *Original `json:"original"`
}

// Validate validates this to check
func (m *ToCheck) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ToCheck) validateField(formats strfmt.Registry) error {

	if err := validate.Required("field", "body", m.Field); err != nil {
		return err
	}

	if err := m.Field.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("field")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("field")
		}
		return err
	}

	return nil
}

func (m *ToCheck) validateOriginal(formats strfmt.Registry) error {

	if err := validate.Required("original", "body", m.Original); err != nil {
		return err
	}

	if err := validate.Required("original", "body", m.Original); err != nil {
		return err
	}

	if m.Original != nil {
		if err := m.Original.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("original")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("original")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this to check based on the context it is used
func (m *ToCheck) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateField(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ToCheck) contextValidateField(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Field.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("field")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("field")
		}
		return err
	}

	return nil
}

func (m *ToCheck) contextValidateOriginal(ctx context.Context, formats strfmt.Registry) error {

	if m.Original != nil {
		if err := m.Original.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("original")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("original")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ToCheck) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ToCheck) UnmarshalBinary(b []byte) error {
	var res ToCheck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
